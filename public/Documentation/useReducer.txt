const [state, dispatchFn] = useReducer (reducerFn, initialState, initFn);

reducerFn - A function that is triggered automatically once an action is
dispatched (via dispatchFn())-it receives the latest state
snapshot and should return the new, updated state.
initialState -is the initialState
initFn - A function to set the initialState programmatically

useState                                             vs                   useReducer
the main state management "tool"                                Great if you need "more powerful"
Great for independent pieces of state/data                      Should be considered if you have realted pieces of state/data 
Great if state updates are easy and limited to a                Can be helpful if you have more complex state updates 
few kinds of updates

Example: 
import CartContext from "./cart-context";
import { useReducer } from "react";
const defaultCartState = {
  items: [],
  totalAmount: 0,
};

const cartReducer = (state, action) => {
  if (action.type === "ADD") {
    const updatedItems = state.items.concat(action.item);
    //we add this in a imutableWay concat return a new array with the new element added
    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;
    return {
        items: updatedItems,
        totalAmount: updatedTotalAmount
    }
    else if(action.type === "REMOVE")
    {

    }
}
  return defaultCartState;
};
const CartProvider = (props) => {
  const [cartState, dispatchCartAction] = useReducer(
    cartReducer,
    defaultCartState
  );

  const addItemToCartHandler = (item) => {
    dispatchCartAction({
      type: "ADD",
      item: item,
    });
  };
  const removeItemFromCartHandler = (id) => {
    dispatchCartAction({
      type: "REMOVE",
      id: id,
    });
  };

  const cartContext = {
    items: cartState.items,
    totalAmount: cartState.totalAmount,
    addItem: addItemToCartHandler,
    removeItem: removeItemFromCartHandler,
  };

  return (
    <CartContext.Provider value={cartContext}>
      {props.children}
    </CartContext.Provider>
  );
};

export default CartProvider;

